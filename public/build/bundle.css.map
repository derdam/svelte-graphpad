{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Graph.svelte"
  ],
  "sourcesContent": [
    "<script>\n  //\timport AudioPlayer, { stopAll } from './AudioPlayer.svelte';\n\t import * as vis from 'vis-network'\n   import { onMount } from 'svelte';\n   //import { nodeSelection } from './GraphStore.js';\n   import NodeEditor from './NodeEditor.svelte';\n   import EdgeEditor from './EdgeEditor.svelte';\n   import NodeEditorDocument from './NodeEditorDocument.svelte';\n\n\n   let selection = {nodes: [], edges: []};\n\n   let nodeEditor = NodeEditor;\n\n   $: nodesSelected = selection.nodes.length;\n   $: node1 = nodes.get(selection.nodes.slice(0,1));\n   $: node2 = nodes.get(selection.nodes.slice(1,2));\n   $: edge1 = edges.get(selection.edges.slice(0,1));\n\n   $: canAddEdge = selection.nodes.length === 2;\n   $: canDeleteEdge = selection.nodes.length === 0 && selection.edges.length === 1;\n   $: canDeleteNodes = selection.nodes.length > 0;\n   $: canAddNode = selection.nodes.length <= 1;\n   $: canEditNode = selection.nodes.length === 1;\n   $: canEditEdge = selection.edges.length === 1 && !canEditNode;\n\n  $: {\n    if (canEditNode) {\n        nodeEditor = node1[0].nodeEditor ? node1[0].nodeEditor : NodeEditor;\n    }\n  }\n\n\n\t var nodes = new vis.DataSet([\n    {id: 1, label: 'Node 1', shape: 'image',  nodeEditor:NodeEditorDocument, size:50, image: './Austrian_ID_card.jpg'},\n    {id: 2, label: 'Node 2'},\n    {id: 3, label: 'Node 3'},\n    {id: 4, label: 'Node 4'},\n    {id: 5, label: 'Node 5'}\n  ]);\n\n  // create an array with edges\n  var edges = new vis.DataSet([\n    {from: 1, to: 3},\n    {from: 1, to: 2},\n    {from: 2, to: 4},\n    {from: 2, to: 5},\n    {from: 3, to: 3}\n  ]);\n\n  var data = {\n    nodes: nodes,\n    edges: edges\n  };\n\n  var options = {\n    interaction: { multiselect: true},\n    nodes:{\n     shapeProperties: {\n            useBorderWithImage:true\n          }\n    }\n  };\n\n\n  let network;\n\n  onMount(async () => {\n    // create a network\n    var container = document.getElementById('mynet');\n    network = new vis.Network(container, data, options);    \n    network.on(\"select\", function (params) {\n      // nodeSelection.selectNode(params.nodes[0]);\n        selection = params;\n    });\n\n  });\n  \n\n   function addNewEdge() {\n    if (nodesSelected === 2) {\n        edges.add({from: node1[0].id, to: node2[0].id, label: 'New edge'});\n    }\n   }\n\n   function deleteEdge() {\n       // alert(JSON.stringify(edge1));\n        edges.remove(edge1[0]);\n        selection.edges = []\n   }\n\n   function deleteNodes() {\n     edges.remove(selection.edges);\n     nodes.remove(selection.nodes);\n   }\n\n   function addNewNode() {\n     if (nodesSelected <= 1) {\n      var newNode = nodes.add({label: 'New\\nNode'});\n      if (nodesSelected===1) {\n        //alert(\"foo. \"+JSON.stringify(node1.id);\n        var newEdge = edges.add({from: node1[0].id, to: newNode[0], label: 'New edge'});\n         selection.edges = []; \n      }\n        selection.nodes = newNode;\n        network.selectNodes(newNode);\n     }\n    };\n\n    // Event handlers \n\n    function nodeUpdated(event) {\n      nodes.update(event.detail.node);\n    }\n\n    function edgeUpdated(event) {\n      edges.update(event.detail.edge);\n    }\n\n</script>\n\n<style>\n\t.graph {\n\t\twidth:100%;\n\t\theight:600px;\n\t}\n</style>\n\n<!-- link rel='stylesheet' href='/test.css' -->\n\n<!-- <p>Selected nodes are {JSON.stringify(selection)}</p>\n\n<p>Selected node 1 of {nodesSelected} {JSON.stringify(node1)}</p>\n\n<p>Selected node 2 of {nodesSelected} {JSON.stringify(node2)}</p>\n\n<p>Selected edge 1  {JSON.stringify(edge1)}</p>\n-->\n\n{#if canEditEdge}\n  <EdgeEditor edge={edge1[0]} on:message={edgeUpdated}></EdgeEditor>\n{/if}\n\n{#if canEditNode}\n  <!-- <NodeEditor node={node1[0]} on:message={nodeUpdated}></NodeEditor> -->\n  <svelte:component this={nodeEditor} node={node1[0]} on:message={nodeUpdated}></svelte:component>\n{/if}\n\n{#if canAddNode}\n  <button on:click={addNewNode}>New node</button>\n{/if}\n\n{#if canDeleteNodes}\n  <button on:click={deleteNodes}>Delete node{ nodesSelected > 1 ? '(s)':''}</button>\n{/if}\n\n{#if canAddEdge}\n  <button on:click={addNewEdge}>Add Edge</button>\n{/if}\n\n{#if canDeleteEdge}\n  <button on:click={deleteEdge}>Delete Edge</button>\n{/if}\n\n<div id =\"mynet\" class=\"graph\">\n</div>\t"
  ],
  "names": [],
  "mappings": "AA0HC,MAAM,cAAC,CAAC,AACP,MAAM,IAAI,CACV,OAAO,KAAK,AACb,CAAC"
}